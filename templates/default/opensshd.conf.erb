<% node['config_disclaimer'].to_s.split("\n").each do |l| %>
# <%= l %>
<% end %>
#---

# This is the ssh client system-wide configuration file. 
# See sshd_config(5) for more information on any settings used. Comments will be added only to clarify why a configuration was chosen.
# 
# Created for OpenSSH v5.9

# Basic configuration
# ===================

# Either disable or only allow root login via certificates.
<% if @node['ssh']['allow_root_with_key'] %>
PermitRootLogin without-password
<% else %>
PermitRootLogin no
<% end %>

# Define which port sshd should listen to. Default to `22`.
<% Array(@node['ssh']['ports']).each do |ssh_port| %>
Port <%= ssh_port %>
<% end %>

# Address family should always be limited to the active network configuration.
AddressFamily <%= ((@node['network']['ipv6']['enable']) ? "any" : "inet" ) %>

# Define which addresses sshd should listen to. Default to `0.0.0.0`, ie make sure you put your desired address in here, since otherwise sshd will listen to everyone.
<% Array(@node['ssh']['listen_to']).each do |ssh_ip| %>
ListenAddress <%= ssh_ip %>
<% end %>

# List HostKeys here.
<% Array(@node['ssh']['host_key_files']).each do |host_key_file| %>
HostKey <%= host_key_file %>          # Req 20
<% end %>


# Security configuration
# ======================

# Set the protocol version to 2 for security reasons. Disables legacy support.
Protocol 2

# Make sure sshd checks file modes and ownership before accepting logins. This prevents accidental misconfiguration.
StrictModes yes

# Logging, obsoletes QuietMode and FascistLogging 
SyslogFacility AUTH
LogLevel VERBOSE

# Authentication
# --------------

# Secure Login directives.
UseLogin no
UsePrivilegeSeparation <%= @use_priv_sep %>
PermitUserEnvironment no
LoginGraceTime 30s
MaxAuthTries 2
MaxSessions 10
MaxStartups 10:30:100

# Enable public key authentication
PubkeyAuthentication yes

# Never use host-based authentication. It can be exploited.
IgnoreRhosts yes
IgnoreUserKnownHosts yes
HostbasedAuthentication no

# Enable PAM to enforce system wide rules
UsePAM <%= ((@node['ssh']['use_pam']) ? "yes" : "no" ) %>
# For now allow PasswordAuthentication 
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no

# Only enable Kerberos authentication if it is configured.
KerberosAuthentication no
KerberosOrLocalPasswd no
KerberosTicketCleanup yes
#KerberosGetAFSToken no

# Only enable GSSAPI authentication if it is configured.
GSSAPIAuthentication no
GSSAPICleanupCredentials yes

# In case you don't use PAM (`UsePAM no`), you can alternatively restrict users and groups here. For key-based authentication this is not necessary, since all keys must be explicitely enabled.
#DenyUsers *
#AllowUsers user1
#DenyGroups *
#AllowGroups group1


# Network
# -------

# Disable TCP keep alive since it is spoofable. Use ClientAlive messages instead, they use the encrypted channel
TCPKeepAlive no

# Manage `ClientAlive..` signals via interval and maximum count. This will periodically check up to a `..CountMax` number of times within `..Interval` timeframe, and abort the connection once these fail.
ClientAliveInterval <%= @node['ssh']['client_alive_interval'] %>
ClientAliveCountMax <%= @node['ssh']['client_alive_count'] %>

# Disable tunneling
PermitTunnel no

# Disable forwarding tcp connections.
# no real advantage without denied shell access
<% if @node['ssh']['allow_tcp_forwarding'] %>
AllowTcpForwarding yes
<% else %>
AllowTcpForwarding no
<% end %>

# Disable agent formwarding, since local agent could be accessed through forwarded connection.
# no real advantage without denied shell access
<% if @node['ssh']['allow_agent_forwarding'] %>
AllowAgentForwarding yes
<% else %>
AllowAgentForwarding no
<% end %>

# Do not allow remote port forwardings to bind to non-loopback addresses.
GatewayPorts no

# Disable X11 forwarding, since local X11 display could be accessed through forwarded connection.
X11Forwarding no
X11UseLocalhost yes


# Misc. configuration
# ===================


PrintMotd <%= ((@node['ssh']['print_motd']) ? 'yes' : 'no' ) %>
PrintLastLog <%= ((@node['ssh']['print_last_log']) ? 'yes' : 'no' ) %>



